import * as React from 'react'
import { configureAbly } from '@ably-labs/react-hooks'
import { ABLY_CHANNEL, ABLY_EVENTS, HOST_STORAGE_KEY } from '@/utility/constants'
import * as Ably from 'ably'
import Head from 'next/head'
import store from 'store2'

import { Box, Container, Typography, Divider, Alert, AlertTitle, Button } from '@mui/material'
import QuestionPicker from '@/components/questionPicker'

import type { RoundQuestion } from '@/types/types'
import QuestionViewer from '@/components/questionViewer'

const hostCache = store.namespace(HOST_STORAGE_KEY)

export default function Host() {
  const [channel, setChannel] = React.useState<Ably.Types.RealtimeChannelPromise | null>(null)
  const [cacheQuestion, setCacheQuestion] = React.useState<RoundQuestion>()
  const [activeQuestion, setActiveQuestion] = React.useState<RoundQuestion>()

  function handleDiscardCacheQuestion() {
    setCacheQuestion(undefined)
    hostCache.remove('question')
  }
  function handleQuestionSelect(question: RoundQuestion) {
    hostCache.set('question', question)
    setCacheQuestion(undefined)
    setActiveQuestion(question)

    publishQuestion(question)
  }
  function publishQuestion(quesiton: RoundQuestion) {
    if (channel) {
      channel.publish(ABLY_EVENTS.QUESTION_CHANGE, quesiton)
    }
  }

  React.useEffect(() => {
    const ably: Ably.Types.RealtimePromise = configureAbly({
      authUrl: '/api/authentication/token-auth',
    })
    const _channel = ably.channels.get(ABLY_CHANNEL)
    const question = hostCache.get('question')

    if (question) {
      setCacheQuestion(question)
    }

    setChannel(_channel)
    return () => {
      _channel.unsubscribe()
    }
  }, [])

  return (
    <React.Fragment>
      <Head>
        <title>91 Family Feud</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Container
        maxWidth='xl'
        sx={{
          minWidth: 350,
          height: '100vh',
          display: 'flex',
          flexDirection: 'column',
          pt: 2,
        }}
      >
        {!activeQuestion && (
          <React.Fragment>
            <Typography variant='h1' align='center'>
              Host
            </Typography>
            <Divider sx={{ mb: 1 }} />
          </React.Fragment>
        )}
        {!activeQuestion && cacheQuestion && (
          <Alert severity='warning' sx={{ '& .MuiAlert-message': { flexGrow: 1 } }}>
            <AlertTitle>Previous Quesiton Detected</AlertTitle>
            <Typography variant='caption'>{cacheQuestion.text}</Typography>
            <Box display='flex' justifyContent='space-between'>
              <Button onClick={handleDiscardCacheQuestion}>Discard</Button>
              <Button onClick={() => handleQuestionSelect(cacheQuestion)}>Load</Button>
            </Box>
          </Alert>
        )}
        {activeQuestion && (
          <QuestionViewer
            question={activeQuestion}
            onPublishQuestion={publishQuestion}
            onExit={() => {
              setActiveQuestion(undefined)
            }}
          />
        )}
        {!activeQuestion && <QuestionPicker onQuestionSelect={handleQuestionSelect} />}
      </Container>
    </React.Fragment>
  )
}

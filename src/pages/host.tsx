import * as React from 'react'
import { configureAbly } from '@ably-labs/react-hooks'
import { ABLY_CHANNEL, ABLY_EVENTS } from '@/utility/constants'
import * as Ably from 'ably'
import Head from 'next/head'

import { Container, Typography, Divider, Button, Paper, Stack } from '@mui/material'
import PlayArrowIcon from '@mui/icons-material/PlayArrow'
import StopIcon from '@mui/icons-material/Stop'
import type { RoundQuestion } from '@/types/types'
import QuestionViewer from '@/components/questionViewer'

export default function Host() {
  const [channel, setChannel] = React.useState<Ably.Types.RealtimeChannelPromise | null>(null)
  const [activeQuestion, setActiveQuestion] = React.useState<RoundQuestion>()

  function playThemeSong() {
    if (channel) {
      channel.publish(ABLY_EVENTS.PLAY_THEME, { play: true })
    }
  }
  function stopThemeSong() {
    if (channel) {
      channel.publish(ABLY_EVENTS.PLAY_THEME, { play: false })
    }
  }

  React.useEffect(() => {
    const ably: Ably.Types.RealtimePromise = configureAbly({
      authUrl: '/api/authentication/token-auth',
    })
    const _channel = ably.channels.get(ABLY_CHANNEL)
    _channel.subscribe(ABLY_EVENTS.PUBLISH_QUESITON, (message: Ably.Types.Message) => {
      const newQuestion: RoundQuestion = message.data

      setActiveQuestion(newQuestion)
    })
    _channel.subscribe(ABLY_EVENTS.NEW_ROUND, () => {
      setActiveQuestion(undefined)
    })

    setChannel(_channel)
    return () => {
      _channel.unsubscribe()
    }
  }, [])

  return (
    <React.Fragment>
      <Head>
        <title>91 Family Feud</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Container
        maxWidth='xl'
        sx={{
          minWidth: 350,
          height: '100vh',
          display: 'flex',
          flexDirection: 'column',
          pt: 2,
        }}
      >
        <Stack spacing={1}>
          {!activeQuestion && (
            <React.Fragment>
              <Typography variant='h3' align='center'>
                Host
              </Typography>
              <Divider />
            </React.Fragment>
          )}
          {activeQuestion && <QuestionViewer question={activeQuestion} />}
          {!activeQuestion && (
            <Paper sx={{ p: 1 }}>
              <Typography variant='h5' align='center'>
                Waiting for a question to be published
              </Typography>
            </Paper>
          )}
          <Paper sx={{ p: 1, display: 'flex', gap: 1 }}>
            <Button startIcon={<StopIcon />} onClick={stopThemeSong} variant='outlined' fullWidth>
              Stop Theme Song
            </Button>
            <Button
              startIcon={<PlayArrowIcon />}
              onClick={playThemeSong}
              variant='outlined'
              fullWidth
            >
              Play Theme Song
            </Button>
          </Paper>
        </Stack>
      </Container>
    </React.Fragment>
  )
}

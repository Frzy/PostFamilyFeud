import * as React from 'react'
import { configureAbly } from '@ably-labs/react-hooks'
import { ABLY_EVENTS, GAME_CHANNEL_KEY, MUSIC } from '@/utility/constants'
import * as Ably from 'ably'
import Head from 'next/head'

import { Container, Typography, Divider, Button, Paper, Stack, Grid, Fab } from '@mui/material'
import PlayArrowIcon from '@mui/icons-material/PlayArrow'
import StopIcon from '@mui/icons-material/Stop'
import type { RoundQuestion } from '@/types/types'
import QuestionViewer from '@/components/questionViewer'
import store from 'store2'
import GameChannelDialog from '@/components/GameChannelDialog'
import { getGameChannel } from '@/utility/functions'
import BroadcastsIcon from '@mui/icons-material/Podcasts'
import UpdateGameChannelDialog from '@/components/UpdateGameChannelDialog'

export default function Host() {
  const [gameChannel, setGameChannel] = React.useState<string | null>(store.get(GAME_CHANNEL_KEY))
  const [channel, setChannel] = React.useState<Ably.Types.RealtimeChannelPromise | null>(null)
  const [activeQuestion, setActiveQuestion] = React.useState<RoundQuestion>()
  const [showEditChannelDialog, setShowChannelEditDialog] = React.useState(false)

  function playThemeSong() {
    if (channel) {
      channel.publish(ABLY_EVENTS.PLAY_MUSIC, { music: MUSIC.THEME })
    }
  }
  function stopThemeSong() {
    if (channel) {
      channel.publish(ABLY_EVENTS.STOP_MUSIC, {})
    }
  }

  React.useEffect(() => {
    let _channel: Ably.Types.RealtimeChannelPromise | undefined

    if (gameChannel) {
      const ablyChannelName = getGameChannel(gameChannel)
      const ably: Ably.Types.RealtimePromise = configureAbly({
        authUrl: '/api/authentication/token-auth',
      })

      _channel = ably.channels.get(ablyChannelName)
      _channel.subscribe(ABLY_EVENTS.PUBLISH_QUESITON, (message: Ably.Types.Message) => {
        const newQuestion: RoundQuestion = message.data

        setActiveQuestion(newQuestion)
      })
      _channel.subscribe(ABLY_EVENTS.NEW_ROUND, () => {
        setActiveQuestion(undefined)
      })

      setChannel(_channel)
    }

    return () => {
      if (_channel) _channel.unsubscribe()
    }
  }, [gameChannel])

  return (
    <React.Fragment>
      <Head>
        <title>91 Family Feud</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Container
        maxWidth='xl'
        sx={{
          minWidth: 350,
          height: '100vh',
          display: 'flex',
          flexDirection: 'column',
          pt: 2,
          pb: '50px',
        }}
      >
        <Stack spacing={1}>
          {!activeQuestion && (
            <React.Fragment>
              <Typography variant='h3' align='center'>
                Host
              </Typography>
              <Divider />
            </React.Fragment>
          )}
          {activeQuestion && <QuestionViewer question={activeQuestion} />}
          {!activeQuestion && (
            <Paper sx={{ p: 1 }}>
              <Typography variant='h5' align='center'>
                Waiting for a question to be published
              </Typography>
            </Paper>
          )}

          <Grid container spacing={1}>
            <Grid item xs={12} sm={6}>
              <Button
                startIcon={<PlayArrowIcon />}
                onClick={playThemeSong}
                variant='outlined'
                fullWidth
              >
                Play Theme Song
              </Button>
            </Grid>
            <Grid item xs={12} sm={6}>
              <Button startIcon={<StopIcon />} onClick={stopThemeSong} variant='outlined' fullWidth>
                Stop Theme Song
              </Button>
            </Grid>
          </Grid>
        </Stack>
        <GameChannelDialog
          open={!gameChannel}
          onSubmit={(newChannel, rememberMe) => {
            if (rememberMe) store.set(GAME_CHANNEL_KEY, newChannel)
            setGameChannel(newChannel)
          }}
        />
        <UpdateGameChannelDialog
          open={showEditChannelDialog}
          gameChannel={gameChannel ?? ''}
          onClose={() => setShowChannelEditDialog(false)}
          onSubmit={(newChannel, rememberMe) => {
            if (rememberMe) store.set(GAME_CHANNEL_KEY, newChannel)
            setGameChannel(newChannel)
          }}
        />
      </Container>
      {gameChannel && (
        <Fab
          variant='extended'
          size='small'
          color='primary'
          sx={{
            position: 'fixed',
            right: 8,
            bottom: 8,
          }}
          onClick={() => {
            setShowChannelEditDialog(true)
          }}
        >
          <BroadcastsIcon sx={{ mr: 1 }} />
          {gameChannel}
        </Fab>
      )}
    </React.Fragment>
  )
}
